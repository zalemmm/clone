{"version":3,"sources":["_variables.scss","style.css","../node_modules/susy/sass/susy/language/susy/_box-sizing.scss","../node_modules/susy/sass/susy/output/support/_rem.scss","_layout.scss","../node_modules/susy/sass/susy/language/susy/_container.scss","../node_modules/susy/sass/susy/output/support/_clearfix.scss","../node_modules/susy/sass/susy/language/susy/_span.scss","../node_modules/susy/sass/susy/output/shared/_direction.scss","../node_modules/susy/sass/susy/language/susy/_gutters.scss","_header.scss","style.scss"],"names":[],"mappings":"AAWA,yEAAY;ACVZ,yEAAyE;ACmBrE;ECDA,uBDemC;CAd2B;;ADZlE,+BAA+B;AGR/B;EDmBI,gBClBqB;EDkBrB,kBEqDoC;EFrDpC,mBEqDmE;CDtEtE;;AHaD,wEAAwE;AKJpE;EACE,aAAY;EACZ,eAAc;EACd,YAAW;CACZ;;ALOL,mCAAmC;ADKjC;EACE,eAAc;EACd,YAAW;EACX,YAAW;CACZ;;ACFH,+BAA+B;AGzB/B;EDeI,iBIwI0C;EJxI1C,YKA4D;ELA5D,uBMqFsB;ENrFtB,wBMqFsB;CL/FvB;;AH4BH,gCAAgC;AGjChC;EDeI,iBIwI0C;EJxI1C,YKA4D;ELA5D,uBMqFsB;ENrFtB,wBMqFsB;CLvFvB;;AH4BH,gCAAgC;AGzChC;EDeI,WIwI0C;EJxI1C,YKA4D;ELA5D,iBMqFsB;ENrFtB,kBMqFsB;CLxFrB;;AHqCL,mCAAmC;AD1BjC;EACE,eAAc;EACd,YAAW;EACX,YAAW;CACZ;;AC6BH,gCAAgC;AGpChC;EDLI,iBIwI0C;EJxI1C,YKA4D;ELA5D,uBMqFsB;ENrFtB,wBMqFsB;CL9EzB;;AH0CD,gCAAgC;AGxChC;EDTI,iBIwI0C;EJxI1C,YKA4D;ELA5D,uBMqFsB;ENrFtB,wBMqFsB;CL1EzB;;AH8CD,gCAAgC;AG5ChC;EDbI,iBIwI0C;EJxI1C,aKAuE;ELAvE,uBMqFsB;ENrFtB,wBMqFsB;CLtEzB;;AHkDD,gCAAgC;AGhDhC;EAEI,oBAAmB;EDnBnB,iBIwI0C;EJxI1C,YKA4D;ELA5D,uBMqFsB;ENrFtB,wBMqFsB;CL/DvB;;AHoDH,gCAAgC;AGjDhC;EDzBI,YIyHkE;EJzHlE,YKA4D;ELA5D,uBMqFsB;ENrFtB,wBMqFsB;CL1DzB;;AAED;EHsDE,mCAAmC;ED3EnC;IACE,eAAc;IACd,YAAW;IACX,YAAW;GACZ;EC6ED,gCAAgC;EG3DhC;ID9BE,WIwI0C;IJxI1C,YKA4D;ILA5D,uBMqFsB;INrFtB,wBMqFsB;GLlDrB;EH6DH,gCAAgC;EGlEhC;ID9BE,WIwI0C;IJxI1C,YKA4D;ILA5D,uBMqFsB;INrFtB,wBMqFsB;GL1CrB;EH4DH,gCAAgC;EGzEhC;ID9BE,YIwI0C;IJxI1C,YKA4D;ILA5D,uBMqFsB;INrFtB,wBMqFsB;GL3CnB;EHoEL,mCAAmC;EDtGnC;IACE,eAAc;IACd,YAAW;IACX,YAAW;GACZ;ECwGD,gCAAgC;EGlEhC;IDlDE,YIwI0C;IJxI1C,YKA4D;ILA5D,uBMqFsB;INrFtB,wBMqFsB;GLjCvB;EHuED,gCAAgC;EGrEhC;IDtDE,YIwI0C;IJxI1C,YKA4D;ILA5D,uBMqFsB;INrFtB,wBMqFsB;GL7BvB;EH0ED,gCAAgC;EGxEhC;ID1DE,YIwI0C;IJxI1C,YKA4D;ILA5D,uBMqFsB;INrFtB,wBMqFsB;GLzBvB;EH6ED,gCAAgC;EG3EhC;IAEI,oBAAmB;IDhErB,WIwI0C;IJxI1C,YKA4D;ILA5D,uBMqFsB;INrFtB,wBMqFsB;GLlBrB;CH8EJ;;AAED,+BAA+B;AStK/B;EACE,0BAAuC;CACxC;;ATyKD,+BAA+B;ASvK/B;EACE,aAAY;EACZ,uBAAsB;CACvB;;AT0KD,gCAAgC;AStKhC;EACE,uBAAsB;EACtB,0BAAyB;EACzB,kBAAiB;EACjB,kBAAiB;EACjB,kBAAiB;CAelB;;AT2JD,gCAAgC;AS/KhC;EAOI,sBAAqB;EACrB,gBAAe;EACf,gBAAe;EACf,eAAgC;EAChC,oBAAmB;EACnB,0BVAa;CUOd;;ATsKH,gCAAgC;ASzLhC;EAeM,qCAA4B;EAA5B,6BAA4B;EAC5B,eAAgC;EAChC,0BVJW;CUKZ;;AT8KL,6BAA6B;AUtM7B;EACE,eAAgC;EAChC,0BXcgB;EWbhB,kCXI8B;EWH9B,eAAc;CACf;;AVyMD,8BAA8B;AUvM9B;EACE,sBAAqB;EACrB,eXUe;CWJhB;;AVqMD,8BAA8B;AU7M9B;EAKI,qCAA4B;EAA5B,6BAA4B;EAC5B,eXKa;CWJd;;AV4MH,8BAA8B;AUzM9B;EACE,gBAAe;EACf,aAAY;CACb;;AV4MD,8BAA8B;AU1M9B;EACE,sBAAqB;CACtB;;AV6MD,8BAA8B;AU3M9B;EACE,0BAAyB;EACzB,eXVe;EWWf,kBAAiB;CAClB;;AV8MD,8BAA8B;AU5M9B;EACE,mBAAkB;EAAG,WAAW;CACjC;;AVgND,8BAA8B;AU9M9B;EACE,mBAAkB;CAKnB;;AV6MD,8BAA8B;AUnN9B;EAII,gBAAe;CAChB;;AVmNH,8BAA8B;AUhN9B;EAEI,0BAAyB;EACzB,kBAAiB;EACjB,oBAAmB;CACpB","file":"../style.css","sourcesContent":["$susy: (\n  columns: 12,\n  gutters: 1 / 4,\n  math: fluid,\n  output: float,\n  gutter-position: inside,\n  global-box-sizing: border-box,\n  use-custom: (rem: true)\n);\n\n@include border-box-sizing;\n@import url('https://fonts.googleapis.com/css?family=Slabo+27px|Ubuntu');\n$base-font: 'Ubuntu', sans-serif;\n\n// breakpoints\n$mobile: 22.5rem;\n$tablet: 48rem;\n$desktop: 60rem;\n$widescreen: 85rem;\n\n// colors\n$color-bg: #303030;\n$color-text: #757474;\n$color-1: #46694e;\n$color-2: #8f5647;\n\n@mixin clear {\n  &:after {\n    display: table;\n    clear: both;\n    content: '';\n  }\n}\n","@import url(\"https://fonts.googleapis.com/css?family=Slabo+27px|Ubuntu\");\n/* line 21, node_modules/susy/sass/susy/language/susy/_box-sizing.scss */\n*, *:before, *:after {\n  -moz-box-sizing: border-box;\n  -webkit-box-sizing: border-box;\n  box-sizing: border-box;\n}\n\n/* line 1, sass/_layout.scss */\nbody {\n  max-width: 100%;\n  margin-left: auto;\n  margin-right: auto;\n}\n\n/* line 12, node_modules/susy/sass/susy/output/support/_clearfix.scss */\nbody:after {\n  content: \" \";\n  display: block;\n  clear: both;\n}\n\n/* line 28, sass/_variables.scss */\nheader:after {\n  display: table;\n  clear: both;\n  content: '';\n}\n\n/* line 8, sass/_layout.scss */\nheader .logo {\n  width: 16.66667%;\n  float: left;\n  padding-left: 0.83333%;\n  padding-right: 0.83333%;\n}\n\n/* line 12, sass/_layout.scss */\nheader nav {\n  width: 83.33333%;\n  float: left;\n  padding-left: 0.83333%;\n  padding-right: 0.83333%;\n}\n\n/* line 15, sass/_layout.scss */\nheader nav li {\n  width: 20%;\n  float: left;\n  padding-left: 2%;\n  padding-right: 2%;\n}\n\n/* line 28, sass/_variables.scss */\nsection:after {\n  display: table;\n  clear: both;\n  content: '';\n}\n\n/* line 25, sass/_layout.scss */\n.box {\n  width: 33.33333%;\n  float: left;\n  padding-left: 0.83333%;\n  padding-right: 0.83333%;\n}\n\n/* line 29, sass/_layout.scss */\naside {\n  width: 41.66667%;\n  float: left;\n  padding-left: 0.83333%;\n  padding-right: 0.83333%;\n}\n\n/* line 33, sass/_layout.scss */\n.sidebar {\n  width: 16.66667%;\n  float: right;\n  padding-left: 0.83333%;\n  padding-right: 0.83333%;\n}\n\n/* line 38, sass/_layout.scss */\n.gallery img {\n  margin-bottom: 20px;\n  width: 33.33333%;\n  float: left;\n  padding-left: 0.83333%;\n  padding-right: 0.83333%;\n}\n\n/* line 45, sass/_layout.scss */\nfooter {\n  width: 100%;\n  float: left;\n  padding-left: 0.83333%;\n  padding-right: 0.83333%;\n}\n\n@media (max-width: 22.5rem) {\n  /* line 28, sass/_variables.scss */\n  header:after {\n    display: table;\n    clear: both;\n    content: '';\n  }\n  /* line 53, sass/_layout.scss */\n  header .logo {\n    width: 50%;\n    float: left;\n    padding-left: 0.83333%;\n    padding-right: 0.83333%;\n  }\n  /* line 57, sass/_layout.scss */\n  header nav {\n    width: 50%;\n    float: left;\n    padding-left: 0.83333%;\n    padding-right: 0.83333%;\n  }\n  /* line 60, sass/_layout.scss */\n  header nav li {\n    width: 100%;\n    float: left;\n    padding-left: 0.83333%;\n    padding-right: 0.83333%;\n  }\n  /* line 28, sass/_variables.scss */\n  section:after {\n    display: table;\n    clear: both;\n    content: '';\n  }\n  /* line 70, sass/_layout.scss */\n  .box {\n    width: 100%;\n    float: left;\n    padding-left: 0.83333%;\n    padding-right: 0.83333%;\n  }\n  /* line 74, sass/_layout.scss */\n  aside {\n    width: 100%;\n    float: left;\n    padding-left: 0.83333%;\n    padding-right: 0.83333%;\n  }\n  /* line 78, sass/_layout.scss */\n  .sidebar {\n    width: 100%;\n    float: left;\n    padding-left: 0.83333%;\n    padding-right: 0.83333%;\n  }\n  /* line 83, sass/_layout.scss */\n  .gallery img {\n    margin-bottom: 20px;\n    width: 50%;\n    float: left;\n    padding-left: 0.83333%;\n    padding-right: 0.83333%;\n  }\n}\n\n/* line 1, sass/_header.scss */\nheader {\n  background-color: #2b2b2b;\n}\n\n/* line 5, sass/_header.scss */\nul {\n  height: 3rem;\n  vertical-align: middle;\n}\n\n/* line 12, sass/_header.scss */\n.menu-item {\n  vertical-align: bottom;\n  text-transform: uppercase;\n  font-size: 1.2rem;\n  font-weight: bold;\n  line-height: 3rem;\n}\n\n/* line 18, sass/_header.scss */\n.menu-item a {\n  display: inline-block;\n  max-width: 100%;\n  padding: 0 3rem;\n  color: #a8a7a7;\n  border-radius: 30px;\n  background-color: #46694e;\n}\n\n/* line 26, sass/_header.scss */\n.menu-item a:hover {\n  transition: all ease-in 0.5s;\n  color: #a8a7a7;\n  background-color: #8f5647;\n}\n\n/* line 6, sass/style.scss */\nbody {\n  color: #8e8e8e;\n  background-color: #303030;\n  font-family: \"Ubuntu\", sans-serif;\n  font-size: 1em;\n}\n\n/* line 13, sass/style.scss */\na {\n  text-decoration: none;\n  color: #8f5647;\n}\n\n/* line 17, sass/style.scss */\na:hover {\n  transition: all ease-in 0.5s;\n  color: #46694e;\n}\n\n/* line 23, sass/style.scss */\nimg {\n  max-width: 100%;\n  height: auto;\n}\n\n/* line 28, sass/style.scss */\nli {\n  list-style-type: none;\n}\n\n/* line 32, sass/style.scss */\nh1 {\n  text-transform: uppercase;\n  color: #46694e;\n  font-size: 2.2rem;\n}\n\n/* line 38, sass/style.scss */\nh2 {\n  font-size: 1.75rem;\n  /* 28/16 */\n}\n\n/* line 42, sass/style.scss */\n.center {\n  text-align: center;\n}\n\n/* line 45, sass/style.scss */\n.center i {\n  font-size: 5rem;\n}\n\n/* line 51, sass/style.scss */\n.sidebar-menu-item a {\n  text-transform: uppercase;\n  font-size: 1.4rem;\n  line-height: 1.8rem;\n}\n","// Susy Box Sizing\n// =================\n\n// Global Box Sizing\n// -----------------\n// Set a box model globally on all elements.\n// - [$box]: border-box | content-box\n// - [$inherit]: true | false\n@mixin global-box-sizing(\n  $box: susy-get(global-box-sizing),\n  $inherit: false\n) {\n  $inspect: $box;\n\n  @if $inherit {\n    @at-root {\n       html { @include output((box-sizing: $box)); }\n       *, *:before, *:after { box-sizing: inherit; }\n     }\n  } @else {\n    *, *:before, *:after { @include output((box-sizing: $box)); }\n  }\n\n  @include susy-inspect(global-box-sizing, $inspect);\n  @include update-box-model($box);\n}\n\n// Border Box Sizing\n// -----------------\n// A legacy shortcut...\n// - [$inherit]: true | false\n@mixin border-box-sizing(\n  $inherit: false\n) {\n  @include global-box-sizing(border-box, $inherit);\n}\n\n// Update Box Model\n// ----------------\n// PRIVATE: Updates global box model setting\n@mixin update-box-model(\n  $box\n) {\n  @if $box != susy-get(global-box-sizing) {\n  @include susy-set(global-box-sizing, $box);\n  }\n}\n","// rem Support\n// ===========\n\n// rem\n// ---\n// Check for an existing support mixin, or output directly.\n// - $prop  : <css property>\n// - $val   : <css value>\n@mixin susy-rem(\n  $prop,\n  $val\n) {\n  $_reqs: (\n    variable: rhythm-unit rem-with-px-fallback,\n    mixin: rem,\n  );\n  @if susy-support(rem, $_reqs, $warn: false) and $rhythm-unit == rem {\n    @include rem($prop, $val);\n  } @else {\n    #{$prop}: $val;\n  }\n}\n","body {\n  @include container(100%);\n}\n\nheader {\n  @include clear;\n\n  .logo {\n    @include span(2);\n  }\n\n  nav {\n    @include span(10);\n\n    li {\n      @include span(1 of 5);\n    }\n  }\n}\n\nsection {\n  @include clear;\n}\n\n.box {\n  @include span(4);\n}\n\naside {\n  @include span(5);\n}\n\n.sidebar {\n  @include span(2 last);\n}\n\n.gallery {\n  img {\n    margin-bottom: 20px;\n\n    @include span(4);\n  }\n}\n\nfooter {\n  @include span(full);\n}\n\n@media(max-width:$mobile) {\n  header {\n    @include clear;\n\n    .logo {\n      @include span(6);\n    }\n\n    nav {\n      @include span(6);\n\n      li {\n        @include span(12);\n      }\n    }\n  }\n\n  section {\n    @include clear;\n  }\n\n  .box {\n    @include span(12);\n  }\n\n  aside {\n    @include span(12);\n  }\n\n  .sidebar {\n    @include span(12);\n  }\n\n  .gallery {\n    img {\n      margin-bottom: 20px;\n\n      @include span(6);\n    }\n  }\n}\n","// Container Syntax\n// ================\n\n// Container [mixin]\n// -----------------\n// Set a container element\n// - [$layout]  : <settings>\n@mixin container(\n  $layout: $susy\n) {\n  $inspect    : $layout;\n  $layout     : parse-grid($layout);\n\n  $_width     : get-container-width($layout);\n  $_justify   : parse-container-position(susy-get(container-position, $layout));\n  $_property  : if(susy-get(math, $layout) == static, width, max-width);\n\n  $_box       : susy-get(box-sizing, $layout);\n\n  @if $_box {\n    @include output((box-sizing: $_box));\n  }\n\n  @include susy-inspect(container, $inspect);\n  @include float-container($_width, $_justify, $_property);\n  @include show-grid($layout);\n}\n\n// Container [function]\n// --------------------\n// Return container width\n// - [$layout]  : <settings>\n@function container(\n  $layout: $susy\n) {\n  $layout: parse-grid($layout);\n  @return get-container-width($layout);\n}\n\n// Get Container Width\n// -------------------\n// Calculate the container width\n// - [$layout]: <settings>\n@function get-container-width(\n  $layout: $susy\n) {\n  $layout         : parse-grid($layout);\n  $_width         : susy-get(container, $layout);\n  $_column-width  : susy-get(column-width, $layout);\n  $_math          : susy-get(math, $layout);\n\n  @if not($_width) or $_width == auto {\n    @if valid-column-math($_math, $_column-width) {\n      $_columns   : susy-get(columns, $layout);\n      $_gutters   : susy-get(gutters, $layout);\n      $_spread    : if(is-split($layout), wide, narrow);\n      $_width     : susy-sum($_columns, $_gutters, $_spread) * $_column-width;\n    } @else {\n      $_width: 100%;\n    }\n  }\n\n  @return $_width;\n}\n\n// Parse Container Position\n// ------------------------\n// Parse the $container-position into margin values.\n// - [$justify]   : left | center | right | <length> [<length>]\n@function parse-container-position(\n  $justify: map-get($susy-defaults, container-position)\n) {\n  $_return: if($justify == left, 0, auto) if($justify == right, 0, auto);\n\n  @if not(index(left right center, $justify)) {\n    $_return: nth($justify, 1);\n    $_return: $_return if(length($justify) > 1, nth($justify, 2), $_return);\n  }\n\n  @return $_return;\n}\n","// Susy Fallback Clearfix\n// ======================\n\n\n// Clearfix\n// --------\n// Check for an existing support mixin, or provide a simple fallback.\n@mixin susy-clearfix {\n  @if susy-support(clearfix, (mixin: clearfix)) {\n    @include clearfix;\n  } @else {\n    &:after {\n      content: \" \";\n      display: block;\n      clear: both;\n    }\n  }\n}\n","// Span Syntax\n// ===========\n\n// Span [mixin]\n// ------------\n// Set a spanning element using shorthand syntax.\n// - $span  : <span>\n@mixin span(\n  $span\n) {\n  $inspect: $span;\n  $span: parse-span($span);\n  $output: span-math($span);\n  $nesting: susy-get(span, $span);\n  $clear: susy-get(clear, $span);\n\n  $box: susy-get(box-sizing, $span);\n  $content-box: if(susy-get(global-box-sizing) != 'border-box', true, false);\n  $box: $box or if(is-inside($span) and $content-box, border-box, null);\n\n  @if $clear == break {\n    @include break;\n  } @else if $clear == nobreak {\n    @include nobreak;\n  }\n\n  @include susy-inspect(span, $inspect);\n  @include output((box-sizing: $box));\n  @include float-span-output($output...);\n\n  @if valid-columns($nesting, silent) {\n    @include nested($span) { @content; }\n  } @else {\n    @content;\n  }\n}\n\n// Span [function]\n// ---------------\n// Return the width of a span.\n// - $span  : <span>\n@function span(\n  $span\n) {\n  @return get-span-width($span);\n}\n\n// Span Math\n// ---------\n// Get all the span results.\n// - $span: <map>\n@function span-math(\n  $span\n) {\n  $nest             : if(susy-get(role, $span) == nest, true, false);\n  $split-nest       : if(is-split($span) and $nest, true, false);\n  $edge             : get-edge($span);\n  $location         : get-location($span);\n\n  $float            : from;\n  $padding-before   : null;\n  $padding-after    : null;\n  $margin-before    : null;\n  $margin-after     : null;\n\n  // calculate widths\n  $spread: index(map-values($span), spread);\n  $span: if($split-nest and not($spread), map-merge($span, (spread: wide)), $span);\n  $width: get-span-width($span);\n  $gutters: get-gutters($span);\n\n  // apply gutters\n  @if is-inside($span) {\n    @if not(susy-get(role, $span)) {\n      $padding-before: map-get($gutters, before);\n      $padding-after: map-get($gutters, after);\n    }\n  } @else {\n    @if not($split-nest) {\n      $margin-before: map-get($gutters, before);\n      $margin-after: map-get($gutters, after);\n    }\n  }\n\n  // special margin handling\n  @if susy-get(output, $span) == isolate and $location {\n    $margin-before: get-isolation($span);\n    $margin-after: -100%;\n  } @else if $edge {\n    $is-split: is-split($span);\n    $pos: susy-get(gutter-position, $span);\n\n    @if $edge == last {\n      $float: susy-get(last-flow, $span);\n    }\n\n    @if not($is-split) {\n      @if $edge == full or ($edge == first and $pos == before) {\n        $margin-before: 0;\n      }\n      @if $edge == full or ($edge == last and $pos == after) {\n        $margin-after: 0;\n      }\n    }\n\n  }\n\n  @return (\n    width           : $width,\n    float           : $float,\n    margin-before   : $margin-before,\n    margin-after    : $margin-after,\n    padding-before  : $padding-before,\n    padding-after   : $padding-after,\n    flow            : susy-get(flow, $span),\n  );\n}\n\n// Get Span Width\n// --------------\n// Return span width.\n// - $span: <map>\n@function get-span-width(\n  $span\n) {\n  $span     : parse-span($span);\n\n  $n        : susy-get(span, $span);\n  $location : get-location($span);\n  $columns  : susy-get(columns, $span);\n  $gutters  : susy-get(gutters, $span);\n  $spread   : susy-get(spread, $span);\n\n  $context  : null;\n  $span-sum : null;\n  $width    : null;\n\n  @if $n == 'full' {\n    $pos: susy-get(gutter-position, $span);\n    $role: susy-get(role, $span);\n    $n: if($pos == split and $role != nest, susy-count($columns), 100%);\n  }\n\n  @if type-of($n) != number {\n    @warn \"(#{type-of($n)}) #{$n} is not a valid span.\";\n  } @else if unitless($n) {\n    $context: susy-sum($columns, $gutters, if(is-split($span), wide, narrow));\n    $spread: if(is-inside($span), $spread or wide, $spread);\n    $span-sum: susy($n, $location, $columns, $gutters, $spread);\n\n    $_math: susy-get(math, $span);\n    $_column-width: susy-get(column-width, $span);\n    @if $_math == static {\n      $width: $span-sum * valid-column-math($_math, $_column-width);\n    } @else {\n      $width: percentage($span-sum / $context);\n    }\n  } @else {\n    $width: $n;\n  }\n\n  @return $width;\n}\n","// Direction Helpers\n// =================\n\n// Susy Flow Defaults\n// ------------------\n// - PRIVATE\n@include susy-defaults((\n  flow: ltr,\n));\n\n// Get Direction\n// -------------\n// Return the 'from' or 'to' direction of a ltr or rtl flow.\n// - [$flow]  : ltr | rtl\n// - [$key]   : from | to\n@function get-direction(\n  $flow: map-get($susy-defaults, flow),\n  $key: from\n) {\n  $return: if($flow == rtl, (from: right, to: left), (from: left, to: right));\n  @return map-get($return, $key);\n}\n\n// To\n// --\n// Return the 'to' direction of a flow\n// - [$flow]  : ltr | rtl\n@function to(\n  $flow: map-get($susy-defaults, flow)\n) {\n  @return get-direction($flow, to);\n}\n\n// From\n// ----\n// Return the 'from' direction of a flow\n// - [$flow]  : ltr | rtl\n@function from(\n  $flow: map-get($susy-defaults, flow)\n) {\n  @return get-direction($flow, from);\n}\n","// Gutter Syntax\n// =============\n\n\n// Gutters\n// -------\n// Set gutters on an element.\n// - [$span]   : <settings>\n@mixin gutters(\n  $span: $susy\n) {\n  $inspect  : $span;\n  $span     : parse-gutters($span);\n  $_gutters : get-gutters($span);\n\n  $_output: (\n    before: map-get($_gutters, before),\n    after: map-get($_gutters, after),\n    flow: susy-get(flow, $span),\n  );\n\n  @include susy-inspect(gutters, $inspect);\n\n  @if is-inside($span) {\n    @include padding-output($_output...);\n  } @else {\n    @include margin-output($_output...);\n  }\n}\n\n@mixin gutter(\n  $span: $susy\n) {\n  @include gutters($span);\n}\n\n\n// Gutter\n// ------\n// Return the width of a gutter.\n// - [$span]   : <settings>\n@function gutter(\n  $span: $susy\n) {\n  $span: parse-gutters($span);\n\n  $_gutters: get-gutters($span);\n  $_gutters: map-get($_gutters, before) or map-get($_gutters, after);\n\n  @return $_gutters;\n}\n\n@function gutters(\n  $span: $susy\n) {\n  @return gutter($span);\n}\n\n\n// Get Gutter Width\n// ----------------\n// Return gutter width.\n// - [$context]: <context>\n@function get-gutter-width(\n  $context: $susy\n) {\n  $context  : parse-gutters($context);\n\n  $_gutters : susy-get(gutters, $context);\n  $_gutter  : susy-get(gutter-override, $context);\n\n  @if $_gutters and ($_gutters > 0) and not($_gutter) {\n    $_column-width: susy-get(column-width, $context);\n    $_math: gutter-math($context);\n    @if $_math == static {\n      $_gutter: $_gutters * valid-column-math($_math, $_column-width);\n    } @else {\n      $_columns : susy-get(columns, $context);\n      $_spread  : if(is-split($context), wide, susy-get(spread, $context));\n      $_gutter  : percentage($_gutters / susy-sum($_columns, $_gutters, $_spread));\n    }\n  }\n\n  $_gutter: if($_gutter == 'no-gutters' or $_gutter == 'no-gutter', null, $_gutter);\n\n  @return $_gutter;\n}\n\n\n// Get Gutters\n// -----------\n// Return before and after gutter values.\n// - [$context]: <context>\n@function get-gutters(\n  $context: $susy\n) {\n  $context            : parse-gutters($context);\n\n  $_gutter-position   : susy-get(gutter-position, $context);\n  $_gutter            : get-gutter-width($context);\n\n  $_return            : (before: null, after: null);\n\n  @if is-split($context) and $_gutter {\n    $_gutter: $_gutter / 2;\n    $_return: map-merge($_return, (before: $_gutter, after: $_gutter));\n  } @else {\n    $_return: map-merge($_return, ($_gutter-position: $_gutter));\n  }\n\n  @return $_return;\n}\n\n\n// Is Inside\n// ---------\n// Returns true if gutters are inside.\n// $context: <context>\n@function is-inside(\n  $context\n) {\n  $_inside: inside inside-static;\n  $_gutter-position: susy-get(gutter-position, $context);\n\n  @return if(index($_inside, $_gutter-position), true, false);\n}\n\n\n// Is Split\n// --------\n// Returns true if gutters are split.\n// $context: <context>\n@function is-split(\n  $context\n) {\n  $_split: split inside inside-static;\n  $_gutter-position: susy-get(gutter-position, $context);\n\n  @return if(index($_split, $_gutter-position), true, false);\n}\n\n\n// Gutter Math\n// -----------\n// Return the math to use for gutter calculations\n// $context: <context>\n@function gutter-math(\n  $context: $susy\n) {\n  $_return  : susy-get(math, $context);\n  $_return  : if(susy-get(gutter-position, $context) == inside-static, static, $_return);\n\n  @return $_return;\n}\n","header {\n  background-color: darken($color-bg, 2%);\n}\r\n\r\nul {\n  height: 3rem;\n  vertical-align: middle;\r\n}\n\n// test\n\n.menu-item {\n  vertical-align: bottom;\n  text-transform: uppercase;\n  font-size: 1.2rem;\n  font-weight: bold;\n  line-height: 3rem;\n  a {\n    display: inline-block;\n    max-width: 100%;\n    padding: 0 3rem;\n    color: lighten($color-text, 20%);\n    border-radius: 30px;\n    background-color: $color-1;\n\n    &:hover {\n      transition: all ease-in 0.5s;\n      color: lighten($color-text, 20%);\n      background-color: $color-2;\n    }\n  }\n}\n","@import 'susy';\n@import 'variables';\r\n@import 'layout';\r\n@import 'header';\r\n\r\nbody {\n  color: lighten($color-text, 10%);\n  background-color: $color-bg;\n  font-family: $base-font;\n  font-size: 1em;\n}\r\n\r\na {\n  text-decoration: none;\n  color: $color-2;\n\r\n  &:hover {\n    transition: all ease-in 0.5s;\n    color: $color-1;\n  }\n}\r\n\r\nimg {\n  max-width: 100%;\n  height: auto;\r\n}\r\n\r\nli {\n  list-style-type: none;\r\n}\r\n\r\nh1 {\n  text-transform: uppercase;\n  color: $color-1;\n  font-size: 2.2rem;\n}\r\n\r\nh2 {\n  font-size: 1.75rem; /* 28/16 */\r\n}\r\n\r\n.center {\n  text-align: center;\r\n\r\n  i {\n    font-size: 5rem;\r\n  }\n}\r\n\r\n.sidebar-menu-item {\n  a {\n    text-transform: uppercase;\n    font-size: 1.4rem;\n    line-height: 1.8rem;\n  }\n}\n"]}