{"version":3,"sources":["_variables.scss","../node_modules/susy/sass/susy/language/susy/_box-sizing.scss","../node_modules/susy/sass/susy/output/support/_rem.scss","_layout.scss","../node_modules/susy/sass/susy/language/susy/_container.scss","../node_modules/susy/sass/susy/output/support/_clearfix.scss","../node_modules/susy/sass/susy/language/susy/_gutters.scss","_header.scss","style.scss"],"names":[],"mappings":"AAWA,yEAAY,yECSR,mBCDA,qBDemC,CAd2B,+BEpBlE,KDmBI,eAAA,iBAAA,iBEqDmE,CDtEtE,wEESG,WACE,YACA,cACA,UAAW,CACZ,mCLYH,aACE,cACA,WACA,UAAW,CACZ,+BG3BH,aDeI,gBAAA,WAAA,qBAAA,qBIqFsB,CH/FvB,gCALH,WDeI,gBAAA,WAAA,qBAAA,qBIqFsB,CHvFvB,gCAbH,cDeI,UAAA,WAAA,gBAAA,gBIqFsB,CHxFrB,mCHWH,cACE,cACA,WACA,UAAW,CACZ,gCGPH,KDLI,gBAAA,WAAA,qBAAA,qBIqFsB,CH9EzB,gCAED,MDTI,gBAAA,WAAA,qBAAA,qBIqFsB,CH1EzB,gCAED,SDbI,gBAAA,YAAA,qBAAA,qBIqFsB,CHtEzB,gCAED,aAEI,mBDnBA,gBAAA,WAAA,qBAAA,qBIqFsB,CH/DvB,gCAGH,ODzBI,WAAA,WAAA,qBAAA,qBIqFsB,CH1DzB,+BI9CD,OACE,wBAAuC,CACxC,+BAED,GACE,YACA,qBAAsB,CACvB,gCAID,WACE,sBACA,yBACA,iBACA,iBACA,gBAAiB,CAelB,gCApBD,aAQI,qBACA,eACA,cACA,mBACA,wBPAa,COOd,gCAnBH,mBAeM,oCAAA,AACA,4BAAA,cACA,wBPJW,COKZ,6BCxBL,KACE,cACA,yBACA,gCACA,aAAc,CACf,8BAED,EACE,qBACA,aRUe,CQJhB,8BARD,QAKI,oCAAA,AACA,4BAAA,aRKa,CQJd,8BAGH,GACE,oBAAqB,CACtB,8BAED,GACE,yBACA,cACA,gBAAiB,CAClB,8BACD,GACE,iBAAkB,CACnB,8BAED,QACE,iBAAkB,CAKnB,8BAND,UAII,cAAe,CAChB,8BAGH,qBAEI,yBACA,iBACA,kBAAmB,CACpB","file":"../style.css","sourcesContent":["$susy: (\n  columns: 12,\n  gutters: 1 / 4,\n  math: fluid,\n  output: float,\n  gutter-position: inside,\n  global-box-sizing: border-box,\n  use-custom: (rem: true)\n);\n\n@include border-box-sizing;\n@import url('https://fonts.googleapis.com/css?family=Slabo+27px|Ubuntu');\n$base-font: 'Ubuntu', sans-serif;\n\n// breakpoints\n$mobile: 22.5rem;\n$tablet: 48rem;\n$desktop: 60rem;\n$widescreen: 85rem;\n\n// colors\n$color-bg: #303030;\n$color-text: #757474;\n$color-1: #46694e;\n$color-2: #8f5647;\n\n@mixin clear {\n  &:after {\n    display: table;\n    clear: both;\n    content: '';\n  }\n}\n","// Susy Box Sizing\n// =================\n\n// Global Box Sizing\n// -----------------\n// Set a box model globally on all elements.\n// - [$box]: border-box | content-box\n// - [$inherit]: true | false\n@mixin global-box-sizing(\n  $box: susy-get(global-box-sizing),\n  $inherit: false\n) {\n  $inspect: $box;\n\n  @if $inherit {\n    @at-root {\n       html { @include output((box-sizing: $box)); }\n       *, *:before, *:after { box-sizing: inherit; }\n     }\n  } @else {\n    *, *:before, *:after { @include output((box-sizing: $box)); }\n  }\n\n  @include susy-inspect(global-box-sizing, $inspect);\n  @include update-box-model($box);\n}\n\n// Border Box Sizing\n// -----------------\n// A legacy shortcut...\n// - [$inherit]: true | false\n@mixin border-box-sizing(\n  $inherit: false\n) {\n  @include global-box-sizing(border-box, $inherit);\n}\n\n// Update Box Model\n// ----------------\n// PRIVATE: Updates global box model setting\n@mixin update-box-model(\n  $box\n) {\n  @if $box != susy-get(global-box-sizing) {\n  @include susy-set(global-box-sizing, $box);\n  }\n}\n","// rem Support\n// ===========\n\n// rem\n// ---\n// Check for an existing support mixin, or output directly.\n// - $prop  : <css property>\n// - $val   : <css value>\n@mixin susy-rem(\n  $prop,\n  $val\n) {\n  $_reqs: (\n    variable: rhythm-unit rem-with-px-fallback,\n    mixin: rem,\n  );\n  @if susy-support(rem, $_reqs, $warn: false) and $rhythm-unit == rem {\n    @include rem($prop, $val);\n  } @else {\n    #{$prop}: $val;\n  }\n}\n","body {\n  @include container(100%);\r\n}\r\n\r\nheader {\n  @include clear;\n\n  .logo {\n    @include span(2);\r\n  }\r\n\r\n  nav {\n    @include span(10);\r\n\r\n    li {\n      @include span(1 of 5);\r\n    }\n  }\n}\r\n\r\nsection {\n  @include clear;\n}\r\n\r\n.box {\n  @include span(4);\r\n}\r\n\r\naside {\n  @include span(5);\r\n}\r\n\r\n.sidebar {\n  @include span(2 last);\r\n}\n\r\n.gallery {\n  img {\n    margin-bottom: 20px;\n\n    @include span(4);\n  }\n}\n\r\nfooter {\n  @include span(full);\r\n}\r\n","// Container Syntax\n// ================\n\n// Container [mixin]\n// -----------------\n// Set a container element\n// - [$layout]  : <settings>\n@mixin container(\n  $layout: $susy\n) {\n  $inspect    : $layout;\n  $layout     : parse-grid($layout);\n\n  $_width     : get-container-width($layout);\n  $_justify   : parse-container-position(susy-get(container-position, $layout));\n  $_property  : if(susy-get(math, $layout) == static, width, max-width);\n\n  $_box       : susy-get(box-sizing, $layout);\n\n  @if $_box {\n    @include output((box-sizing: $_box));\n  }\n\n  @include susy-inspect(container, $inspect);\n  @include float-container($_width, $_justify, $_property);\n  @include show-grid($layout);\n}\n\n// Container [function]\n// --------------------\n// Return container width\n// - [$layout]  : <settings>\n@function container(\n  $layout: $susy\n) {\n  $layout: parse-grid($layout);\n  @return get-container-width($layout);\n}\n\n// Get Container Width\n// -------------------\n// Calculate the container width\n// - [$layout]: <settings>\n@function get-container-width(\n  $layout: $susy\n) {\n  $layout         : parse-grid($layout);\n  $_width         : susy-get(container, $layout);\n  $_column-width  : susy-get(column-width, $layout);\n  $_math          : susy-get(math, $layout);\n\n  @if not($_width) or $_width == auto {\n    @if valid-column-math($_math, $_column-width) {\n      $_columns   : susy-get(columns, $layout);\n      $_gutters   : susy-get(gutters, $layout);\n      $_spread    : if(is-split($layout), wide, narrow);\n      $_width     : susy-sum($_columns, $_gutters, $_spread) * $_column-width;\n    } @else {\n      $_width: 100%;\n    }\n  }\n\n  @return $_width;\n}\n\n// Parse Container Position\n// ------------------------\n// Parse the $container-position into margin values.\n// - [$justify]   : left | center | right | <length> [<length>]\n@function parse-container-position(\n  $justify: map-get($susy-defaults, container-position)\n) {\n  $_return: if($justify == left, 0, auto) if($justify == right, 0, auto);\n\n  @if not(index(left right center, $justify)) {\n    $_return: nth($justify, 1);\n    $_return: $_return if(length($justify) > 1, nth($justify, 2), $_return);\n  }\n\n  @return $_return;\n}\n","// Susy Fallback Clearfix\n// ======================\n\n\n// Clearfix\n// --------\n// Check for an existing support mixin, or provide a simple fallback.\n@mixin susy-clearfix {\n  @if susy-support(clearfix, (mixin: clearfix)) {\n    @include clearfix;\n  } @else {\n    &:after {\n      content: \" \";\n      display: block;\n      clear: both;\n    }\n  }\n}\n","// Gutter Syntax\n// =============\n\n\n// Gutters\n// -------\n// Set gutters on an element.\n// - [$span]   : <settings>\n@mixin gutters(\n  $span: $susy\n) {\n  $inspect  : $span;\n  $span     : parse-gutters($span);\n  $_gutters : get-gutters($span);\n\n  $_output: (\n    before: map-get($_gutters, before),\n    after: map-get($_gutters, after),\n    flow: susy-get(flow, $span),\n  );\n\n  @include susy-inspect(gutters, $inspect);\n\n  @if is-inside($span) {\n    @include padding-output($_output...);\n  } @else {\n    @include margin-output($_output...);\n  }\n}\n\n@mixin gutter(\n  $span: $susy\n) {\n  @include gutters($span);\n}\n\n\n// Gutter\n// ------\n// Return the width of a gutter.\n// - [$span]   : <settings>\n@function gutter(\n  $span: $susy\n) {\n  $span: parse-gutters($span);\n\n  $_gutters: get-gutters($span);\n  $_gutters: map-get($_gutters, before) or map-get($_gutters, after);\n\n  @return $_gutters;\n}\n\n@function gutters(\n  $span: $susy\n) {\n  @return gutter($span);\n}\n\n\n// Get Gutter Width\n// ----------------\n// Return gutter width.\n// - [$context]: <context>\n@function get-gutter-width(\n  $context: $susy\n) {\n  $context  : parse-gutters($context);\n\n  $_gutters : susy-get(gutters, $context);\n  $_gutter  : susy-get(gutter-override, $context);\n\n  @if $_gutters and ($_gutters > 0) and not($_gutter) {\n    $_column-width: susy-get(column-width, $context);\n    $_math: gutter-math($context);\n    @if $_math == static {\n      $_gutter: $_gutters * valid-column-math($_math, $_column-width);\n    } @else {\n      $_columns : susy-get(columns, $context);\n      $_spread  : if(is-split($context), wide, susy-get(spread, $context));\n      $_gutter  : percentage($_gutters / susy-sum($_columns, $_gutters, $_spread));\n    }\n  }\n\n  $_gutter: if($_gutter == 'no-gutters' or $_gutter == 'no-gutter', null, $_gutter);\n\n  @return $_gutter;\n}\n\n\n// Get Gutters\n// -----------\n// Return before and after gutter values.\n// - [$context]: <context>\n@function get-gutters(\n  $context: $susy\n) {\n  $context            : parse-gutters($context);\n\n  $_gutter-position   : susy-get(gutter-position, $context);\n  $_gutter            : get-gutter-width($context);\n\n  $_return            : (before: null, after: null);\n\n  @if is-split($context) and $_gutter {\n    $_gutter: $_gutter / 2;\n    $_return: map-merge($_return, (before: $_gutter, after: $_gutter));\n  } @else {\n    $_return: map-merge($_return, ($_gutter-position: $_gutter));\n  }\n\n  @return $_return;\n}\n\n\n// Is Inside\n// ---------\n// Returns true if gutters are inside.\n// $context: <context>\n@function is-inside(\n  $context\n) {\n  $_inside: inside inside-static;\n  $_gutter-position: susy-get(gutter-position, $context);\n\n  @return if(index($_inside, $_gutter-position), true, false);\n}\n\n\n// Is Split\n// --------\n// Returns true if gutters are split.\n// $context: <context>\n@function is-split(\n  $context\n) {\n  $_split: split inside inside-static;\n  $_gutter-position: susy-get(gutter-position, $context);\n\n  @return if(index($_split, $_gutter-position), true, false);\n}\n\n\n// Gutter Math\n// -----------\n// Return the math to use for gutter calculations\n// $context: <context>\n@function gutter-math(\n  $context: $susy\n) {\n  $_return  : susy-get(math, $context);\n  $_return  : if(susy-get(gutter-position, $context) == inside-static, static, $_return);\n\n  @return $_return;\n}\n","header {\n  background-color: darken($color-bg, 2%);\n}\r\n\r\nul {\n  height: 3rem;\n  vertical-align: middle;\r\n}\n\n// test\n\n.menu-item {\n  vertical-align: bottom;\n  text-transform: uppercase;\n  font-size: 1.2rem;\n  font-weight: bold;\n  line-height: 3rem;\n\n  a {\n    display: inline-block;\n    padding: 0 3rem;\n    color: lighten($color-text, 20%);\n    border-radius: 30px;\n    background-color: $color-1;\n\n    &:hover {\n      transition: all ease-in 0.5s;\n      color: lighten($color-text, 20%);\n      background-color: $color-2;\n    }\n  }\n}\n","@import 'susy';\n@import 'variables';\r\n@import 'layout';\r\n@import 'header';\r\n\r\nbody {\n  color: lighten($color-text, 10%);\n  background-color: $color-bg;\n  font-family: $base-font;\n  font-size: 1em;\n}\r\n\r\na {\n  text-decoration: none;\n  color: $color-2;\n\r\n  &:hover {\n    transition: all ease-in 0.5s;\n    color: $color-1;\n  }\n}\r\n\r\nli {\n  list-style-type: none;\r\n}\r\n\r\nh1 {\n  text-transform: uppercase;\n  color: $color-1;\n  font-size: 2.2rem;\n}\r\nh2 {\n  font-size: 1.75rem; /* 28/16 */\r\n}\r\n\r\n.center {\n  text-align: center;\r\n\r\n  i {\n    font-size: 5rem;\r\n  }\n}\r\n\r\n.sidebar-menu-item {\n  a {\n    text-transform: uppercase;\n    font-size: 1.4rem;\n    line-height: 1.8rem;\n  }\n}\n"]}